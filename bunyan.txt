
Log is to keep tracking what happen in application

(log timestamp)
1. Log query from user before access to database || Log request from user 
2. Log result from database 
4. Log response to user 

Similar to batch jobs (schudle jobs) in linux we log when 
    start and 
    finish , or 
    fail (timestamp need)


User got this one on Browser
{"error":"Invalid query"}

Log
{"name":"myapp", "hostname":"Nikhom", "pid":2099, "level":30, "msg":"Incoming request {method:'GET'}","time":"2018-02-11T12:40:26.151Z","v":0}
{"name":"myapp","hostname":"Nikhom","pid":2099,"level":30,"msg":"Incoming request query {query:{}}","time":"2018-02-11T12:41:26.151Z","v":0}
{"name":"myapp","hostname":"Nikhom","pid":2099,"level":30,"msg":"Request failed return error {error:'Invalid query'}","time":"2018-02-11T12:42:28.151Z","v":0}

{"name":"myapp","hostname":"Nikhom","pid":2099,"level":30,"msg":"Incoming request {method:'GET'}","time":"2018-02-11T12:56:26.151Z","v":0}
{"name":"myapp","hostname":"Nikhom","pid":2099,"level":30,"msg":"Incoming request query {query:{q:1}}","time":"2018-02-11T12:57:26.151Z","v":0}
{"name":"myapp","hostname":"Nikhom","pid":2099,"level":30,"msg":"Request failed return error {error:'Invalid number'}","time":"2018-02-11T12:58:28.151Z","v":0}
====================================
====================================
====================================
How to use bunyan

npm install bunyan
--------------------------------------------------------
1)
//app.js
var bunyan = require('bunyan');
var log = bunyan.createLogger({name: 'ShotPitch'});
log.info('Hello World');
log.warn({lang: 'fr'}, 'au revoir');

//Now it show in Terminal
$ node app.js
{"name":"ShotPitch","hostname":"MBP.Home","pid":5354,"level":30,
        "msg":"hi","time":"2016-03-26T18:46:23.851Z","v":0}
{"name":"ShotPitch","hostname":"MBP.Home","pid":5354,"level":40,"lang":"fr",
        "msg":"aurevoir","time":"2016-03-26T18:46:23.853Z","v":0}
--------------------------------------------------------
2)
//app.js
var bunyan = require('bunyan');
var log = bunyan.createLogger({
    name: 'ShotPitch',
    streams: [{
        path: '/var/log/ShotPitch.log',      
        type: 'file'
    }]
});

Now it save in file in /var/log/ShotPitch.log
but cause a lot memory
--------------------------------------------------------
3) Log Rotation //Limit memory 
var bunyan = require('bunyan');
var log = bunyan.createLogger({
    name: 'ShotPitch',
    streams: [{
        type: 'rotating-file',
        path: '/var/log/ShotPitch.log',
        period: '1d',     // daily rotation
        count: 3          // keep 3 back copies
    }]
});
====================================
====================================
====================================
npm install express-bunyan-logger
------------------------------------

app.use(require('express-bunyan-logger')({name: 'ShotPitch',
  streams: [{
    type: 'rotating-file',
    level: 'info',                  // loging level
    path: '/var/log/shotpitch.log',
    period: '1d',   // daily rotation
    count: 3,        // keep 3 back copies
  }]
}));

Although we can get most of these info from nginx and error logs
=====================================
=====================================
=====================================
check code
==========
//isValid.js
//we put this one as middleware in every request

const logger = require("../logger");

module.exports = (req,res,next)=>{
    logger.info("Incoming request query",{query: req.query});

    if(req.query.q==1){
        const error = { error : "Invalid number"} ;
        logger.info("Request failed returning error",error);    //keep in log.json
        return res.json(error);
    }
    else if (!req.query.q){
        const error = { error : "Invalid query"};
        logger.info("Request failed returning error",error);    //keep in log.json
        return res.json(error);
    }
    return next();

}


stream in logging 
    stream: process.stdout
    path: path.resolve(__dirname, "..", "..", "logs.json")   //keep in json format, but file get big in production 

level in logging
    logger.info    //log all the time , light 
    logger.debugging //log when something go wrong in system



$NODE_LOGGING_LEVEL = debug node server.js

=============================
=============================
=============================
https://www.youtube.com/watch?v=pkh3J3u-jN4

